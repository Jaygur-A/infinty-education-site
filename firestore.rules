rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Journey selections: only the owner can access
    match /users/{userId}/journeySelections/{studentId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // User profiles
    match /users/{userId} {
      allow read: if request.auth != null && (
        // Read own profile
        request.auth.uid == userId ||
        // Staff can read users within their own school
        ((request.auth.token.role in ['admin','superAdmin','schoolAdmin','teacher']) &&
          request.auth.token.schoolId != null &&
          resource.data.schoolId == request.auth.token.schoolId) ||
        // Parents (or any authenticated user) can read profiles of people they have a chat with
        exists(getChatDocId(userId, request.auth.uid))
      );
      // Allow users to update their own profile
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Chats and messages
    match /chats/{chatId} {
      // A chat is readable/writable by its participants
      allow read: if request.auth != null && chatHasParticipant(chatId, request.auth.uid);
      allow create: if request.auth != null &&
        request.resource.data.participants is list &&
        request.resource.data.participants.size() == 2 &&
        request.auth.uid in request.resource.data.participants;
      allow update: if request.auth != null && chatHasParticipant(chatId, request.auth.uid);
      allow delete: if false;

      match /messages/{messageId} {
        // Read messages if the user participates in the parent chat
        allow read: if request.auth != null && chatHasParticipant(chatId, request.auth.uid);

        // Create messages when:
        // - Sender is the authenticated user
        // - ChatId matches deterministic id derived from sender/recipient
        // - Recipient is not a guest
        allow create: if request.auth != null &&
          request.resource.data.senderId == request.auth.uid &&
          chatId == deterministicChatId(request.resource.data.senderId, request.resource.data.recipientId) &&
          nonGuestRecipient(request.resource.data.recipientId);

        // No edits/deletes to existing messages
        allow update, delete: if false;
      }
    }

    // Helper to check if a chat document exists between two users
    function getChatDocId(a, b) {
      return "/databases/" + database + "/documents/chats/" + deterministicChatId(a, b);
    }

    // Build the deterministic chat id used by the client: sorted uids joined by "_"
    function deterministicChatId(a, b) {
      return a < b ? (a + "_" + b) : (b + "_" + a);
    }

    // Check if the given uid is in the chat's participants list
    function chatHasParticipant(chatId, uid) {
      return get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([uid]);
    }

    // Disallow sending messages to guest recipients
    function nonGuestRecipient(recipientId) {
      return get(/databases/$(database)/documents/users/$(recipientId)).data.role != 'guest';
    }

    // Default deny for everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
